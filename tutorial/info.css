/* line-height: отвечает за интервал между строк; */
/* цвет текста */
/* color: red; 
    text-align: center; */
/* left — по левому краю. Используется по умолчанию
    center — по центру
    right — по правому краю
    justify — по ширине */
/* border: 1px transparent tomato;
    font-style: italic normal oblique bold; */
/* font-variant: small-caps(пытается сделать текст виде caps) normal - нормальное состояние;
    text-decoration:  - декорация текста (подчеркнутый, зачеркнутый и т.п внешний вид текста)
    где underline - подчеркивание текста
    overline - линия над текстом
    line-through - зачеркивание текста; */

/* font-family: Verdana, Geneva, Tahoma, sans-serif; - назначение определенного шрифта */
/* serif — шрифты с засечками (антиквы). Ярким представителем таких шрифтов является Times New Roman
sans-serif — шрифты без засечек (гротеск). Наиболее знакомыми такими шрифтами являются Arial и Verdana
cursive — курсивные шрифты
fantasy — декоративные шрифты. Это семейство используется реже всего. Дело в том, что декоративные шрифты слишком разные, чтобы они были взаимозаменяемые
monospace — моноширинные шрифты. К ним относятся шрифты, в которых все символы имеют одинаковую ширину. Очень часто их используют программисты в текстовых редакторах */

/* font: italic small-caps bold 24px/1.2 Arial;   еще один вид записи через font. где поочереди устанавливаются значения из списка: */
/* font-style
font-variant
font-weight
font-size / line-height (эти два правила записываются через слэш)
font-family
Обобщённые свойства перебивают отдельные. Если в коде вы указали font-variant: small-caps;, а потом для этого же элемента применили font: 16px/24px sans-serif;, то капитель будет сброшена в значение по умолчанию



Советы: 
Это понятие двойственное, но не следует использовать основной текст со шрифтом меньше 14 пикселей. Если размер шрифта будет меньше, то чтение с мобильных устройств будет пыткой.
Самым распространённым межстрочным интервалом является значение в 150% от размера шрифта. Если текст размером 14 пикселей, то межстрочный интервал желательно установить не менее 21 пикселя.



left — по левому краю. Используется по умолчанию
center — по центру
right — по правому краю
justify — по ширине

padding-top — внутренний отступ сверху
padding-right — внутренний отступ справа
padding-bottom — внутренний отступ снизу
padding-left — внутренний отступ слева
border - 
color - 
background-color */

@media - это медиа запрос, который делает проверку условия и при совпадении условия- выполняет код вложенный в @media
@media (arg:value (условие при котором будет віполняться данный код)) {

    .class {
        arg: value-1;
    }
    
}
.class {
    arg: value;
   
}


Анимация - через @keyframes identifier {  где "identifier" - это название нашей анимации, где в последствии мы будет использовать в элементах. 
    0%: {условие начала}
    50%: {условие в средине}
    100: {условие в конце}
}
/* !Пример анимации со сменой цвета текста!!!!! */

@keyframes color-change {
    0%: {
        color: black;
    },
    50%: {color:blue;},
    100: {
        color: red;
    }
    
}
Для того что бы запустить анимацию на элементе, используется правило "animation" с тремя основными значениями:

Название анимации - color-change 
Длительность анимации. Указывается в секундах (1s, 2s, 3s и так далее)
Бесконечная анимация или нет (если бесконечная, то указывается параметр infinite)
.animation-text {
    animation: color-change 3s infinite;
}




Переменные - значения, которые могут быть запрограмированны и использованны на протяжении всего файла или проекта.

Их мы создаем сами через --value

К примеру, мы можем указать единый стандарт для нашего проекта, по цвету, по размеру шрифта во всех случаях (от 'р' ->h1 или цвет и т.д)

пример глобального аргумента:
:root {
    --my-first-value: 15px;
    --my-second-value: 30px;
/* в названии можно использовать имена к чему эта переменная будет применена */
    --header-font-h1: 60px;
    --color-main: #ff1;
    --color-text: #33f;
    --color-select-text: #red;
    и т.д
}




/* !правило 'position' - имеет несколько значений. */

/* !relative*/
 (относительное позиционирование). Позволяет изменить расположение элемента относительно того места, где он был расположен до применения свойства. При этом, то место на странице, которое блок занимал ранее, останется. То есть другие блоки не будут вставать на место, где блок располагался до применения правила position.
/*!absolute*/
 (абсолютное позиционирование). «Вынимает» блок из HTML вёрстки и изменяет его расположение относительно левого верхнего угла страницы (или родительского элемента, если у него есть свойство position в значении fixed, absolute, relative, или sticky). В отличии от relative, место, где располагался absolute блок, будет удалено, и другие блоки смогут занять это место.
/*!fixed.*/
 Также, как и absolute, данное правило извлечёт блок из HTML вёрстки и расположит его в левом верхнем углу. Отличием от абсолютного позиционирования является то, что блок будет «следовать за страницей» и всегда находится в зоне видимости пользователя. Это удобно для создания меню, которые должны следовать за пользователем.
 /*! Sticky*/